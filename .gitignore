import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner ;
public class eBookSort {
	public static ArrayList<Integer> index = new ArrayList<Integer>(100) ;
	public static ArrayList<String> stringList = new ArrayList<String>();
	public static void main(String[] args) {
		//reads file
		String file = "input.txt";
		Scanner inputStream = null ;
		ArrayList<Storage> list = new ArrayList<Storage>();
		ArrayList<String> str = new ArrayList<String>();
		/*try/catch in case file name is typed in wrong / does not exist.
		 * 
		 */
		try {
			inputStream = new Scanner( new File(file) );

		}   catch (FileNotFoundException e) {
			System.out.print("THE FILE DOES NOT EXIST!");
			System.exit(0);
		}
		int i = 0 ;
		
		while(inputStream.hasNextLine()) {
			
			String aLine = inputStream.nextLine();
			String[] strArray = aLine.split("\t");
			if(strArray.length == 2)
			{
				String aString = strArray[0];
				int aVal = Integer.parseInt(strArray[1]);
				Storage one = new Storage(aString, aVal);
				list.add(one);
			}
			i++ ;
			
		}
		inputStream.close() ;
		for(int m = 0; m < list.size() ; m++)
		{
			str.add(list.get(m).getString());
			index.add(list.get(m).getValue()) ;
			}
		QuickSortS(str);
		for(int m = 0; m < str.size() ; m++)
		{
			System.out.println(str.get(m) + "	" + index.get(m));
		}

	}

	/*
	 * Sorts the strings and corresponding ints in storage
	 */
	public static void QuickSortS(ArrayList<String> initialValue){

	    stringList=initialValue;
	    sort(stringList, 1, stringList.size()-1);
	}

	public static void sort(ArrayList<String> namelist, int i, int j){
		qsort(0, namelist.size()-1);
	    
	}

/*Puts the strings in alphabetical order,  if the two strings are lexographically equal
 * then it compares the integer values of the two strings and orders them in decreasing order
 */
	private static void qsort(int from, int to){
		int i = from;
		int j = to;
		int foo = from+(to - from)/2 ;
		String pivot = stringList.get(foo) ;
		int piv = index.get(foo) ;
		while(i <= j)
		{
			if ((stringList.get(i).compareTo(pivot) == 0 || stringList.get(j).compareTo(pivot) == 0)
					&&(index.get(i) < index.get(j)) ){
				swap(i,j) ;
			}
			while( (stringList.get(i).compareTo(pivot) < 0) || 
			(stringList.get(i).compareTo(pivot) == 0 && index.get(i) < piv) ){i++;}
						
			while(stringList.get(j).compareTo(pivot) > 0){j--;}
			if(i <= j)
			{
				swap(i, j);
				i++;
				j--;
			}

		}
		if(from < j)
		{
			qsort(from, j);
		}
		if(i < to)
		{
			qsort(i, to);
		}
		i = from ;
		j = to ;
	}
	/*swaps the string values in the stringList array, along with the
	 *corresponding int value from the index array
	 */
	private static void swap (int i, int j){
        
	    String temp = stringList.get(i);
	    int temp2 = index.get(i) ;
	    stringList.set(i, stringList.get(j));
	    stringList.set(j, temp);
	    index.set(i, index.get(j)) ;
	    index.set(j, temp2) ;

	}
	/*partition method deduced from psuedocode in our book.
	 * 
	 */
	public static int partition(ArrayList<Integer> arr, int left, int right)
	{
	      int i = left, j = right;
	      int tmp;
	      int pivot = (arr.get(left) + arr.get(right)) / 2;
	     
	      while (i <= j) {
	            while (arr.get(i) < pivot)
	                  i++;
	            while (arr.get(j) > pivot)
	                  j--;
	            if (i <= j) {
	                  tmp = arr.get(i);
	                  arr.set(i, arr.get(j));
	                  arr.set(j, tmp);
	                  i++;
	                  j--;
	            }
	      }
	     
	      return i;
	}
	

}
